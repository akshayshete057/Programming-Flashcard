{"quiz":[
{"question":"How many layers are there in Computer software? Name them.","answer":"There are four layers in Computer Software. These are:<div><ol><li>Machine Language.</li><li>Assembly Language.</li><li>Procedure-Oriented.</li><li>Object-Oriented Programming.</li></ol></div>"},
{"question":"What are objects in C++?","answer":"Objects are entities which can represent a person, a place, a bank account, a table of data or any item that the program has to handle. It is a basic run-time entities. They can also represent user-defined data."},
{"question":"What are classes?","answer":"It is a user defined data structure or type declared with keyword class which contains methods (data and functions). When we define a class, we can use the objects in the class as many times we require if the class is specified as public. There are three access specifiers these are private, public and protected."},
{"question":"What is Data Abstraction?","answer":"Data abstraction means representation of essential features without giving the background details or explanation. In C++ we use this concept in classes. "},
{"question":"What is Encapsulation?","answer":"Wrapping up of data and its functions into a single unit is known as encapsulation. This is a feature of class. The data is not accessible to the outside world in a class and only those functions which are wrapped in the class can use the data available in the class."},
{"question":"What is inheritance? ","answer":"Inheritance is a process through which we can acquire objects of one class to another. It sustains the concept of hierarchical classification."},
{"question":"What is polymorphism? ","answer":"It is an important concept of C++. Polymorphism is a Greek word. Polymorphism means more than one form. These objects behave differently in different contexts."},
{"question":"What is Dynamic Binding?","answer":"Dynamic binding is also called late binding which is referred to the linking of a procedure call to the code which is executed at the run time. "},
{"question":"What is Message passing?","answer":"Message passing is similar the way we communicate with our friends through messaging. In C++, objects communicate with each other by sending and receiving information through messages."},
{"question":"Why we use <b>iostream</b> in the beginning of every program?","answer":"We use iostream in the beginning of every program to use the input output streams in the program, for taking input and being able to show output."},
{"question":"What does &lt;stdio.h&gt; contains in it?","answer":"It contains function prototypes for the standard input output library functions and information used by them."},
{"question":"Why does &lt;string.h&gt; used in every program?","answer":"&lt;string.h&gt; contains function prototypes for string processing functions."},
{"question":"Why are namespaces used?","answer":"It is a new concept introduced by the ANSI C++ standard committee. It defines the scope for the identifiers that are used in the program. We need to include the directives to use the identifiers in namespace scope."},
{"question":"What are member functions?","answer":"A class has its member functions. Member function of a class is a function which has its own definitions like the variables. We can operate on any object of the class of which it is a member, and has access to all the members of the class for that object."},
{"question":"Describe the structure of a C++ program?","answer":"Structure of a C++ program is divided in four sections, namely:<div><ol><li>Include files </li><li>Class declarations</li><li>Member functions definition</li><li>Main function programs</li></ol></div>"},
{"question":"Is C++ a superset of C language or subset of C language?","answer":"C++ is a superset of C language."},
{"question":"Name the major parts of a C++ programs?","answer":"The major parts of a C++ programs are:<div><ol><li>Program feature</li><li>Comments</li><li>Output operators</li><li>Iostream File</li><li>Namespace</li><li>Return type of main()</li></ol></div>"},
{"question":"Difference between C and C++?","answer":"Differences are as follows:<br/><div><ol><li>C++ is a multi-paradigm programming while C is procedural programming paradigm. </li><li>C++ is a secured language (data is hidden) while C is not a secured language (data is not protected). </li><li>We can use virtual functions in C++ whereas we cannot use virtual functions in C.</li><li>In C++ there is a concept of polymorphism but C doesnï¿½t have any concept of polymorphism.</li><li>Overloading is a great feature in C++ where as such feature is not present in C.</li><li>Bottom up approach is used in C++ but Top down approach is used in C.</li></ol></div>"},
{"question":"What are Tokens in C++?","answer":"The smallest individual units used in a program are called Tokens. C++ has these following types of tokens:<div><ol><li>Identifiers</li><li>Keyword</li><li>Constant</li><li>Strings</li><li>Operators</li></ol></div>"},
{"question":"What are keywords?","answer":"Keywords are a type of Tokens. These keywords are explicitly reserved identifiers that cannot be used as variables."},
{"question":"What are Identifiers?","answer":"Identifiers refers to the names of variables, functions, arrays, classes etc created by the programmer."},
{"question":"What does constants in C++?","answer":"Constants refers to the fixed values that do not change during the execution of a program."},
{"question":"Name some basic data types?","answer":"There are three types of data types in C++. These are:<div><ol><li>User-defined type</li><li>Built-In type</li><li>Derived Type</li></ol></div>"},
{"question":"Describe Arrays?","answer":"An array is data structure which stores a fixed-size sequential collection of elements of the same type. We can store a collection of data."},
{"question":"Describe Functions?","answer":"A function is a group of statements that together perform a task. Every C++ program contains a main() function."},
{"question":"What are pointers?","answer":"A pointer is a variable whose value is the address of another variable. When &amp; preceeds a variable name, it describes its address. For example : var is a variable, then &amp;var will return its address. When we store this address in a new variable, the new variable will hold the address of another variable, and it will be called a Pointer."},
{"question":"Explain Reference variable?","answer":"Reference variable provides a different name (alias) for an already defined variable."},
{"question":"Functions malloc() and calloc() are used for?","answer":"<code>malloc()</code> and <code>calloc()</code> functions are used to allocate memory dynamically at run time, and similarly function free() is used to free dynamically allocated memory. "},
{"question":"What is Operator overloading?","answer":"Overloading means assigning different meaning to different meanings to an operation. C++ permits overloading of operations. "},
{"question":"What are functions?","answer":"A function is a group of statements that together perform a task. Every C++ program contains a main() function. "},
{"question":"What is Function prototyping?","answer":"Function prototyping is one of the major feature of C++ which is not in C. Function prototyping, a template is always used to define and declare a function. "},
{"question":"What do you mean by Call by Reference?","answer":"By call by reference method means arguments to a function copies the reference of an argument into formal parameter. The reference is used to access the actual argument used in the call."},
{"question":"What do mean by Call by value?","answer":"Copying of the actual value of an argument into the formal parameter of the function is called call by value.  Changes done to the parameter inside the function have no effect on the argument."},
{"question":"What is Inline function?","answer":"Inline function is a concept that is commonly used with classes. If the function is inline, then the compiler places a copy of the code of that function at each point where the function is called at compile time."},
{"question":"What is a default argument?","answer":"In C++ we can call a function without specifying all its arguments. In this case the function assigns a default value to the parameter which does not have a matching arguments in the function call. Values are specified at the time the function call."},
{"question":"What are const arguments?","answer":"The const qualifier tells the compiler that the function should not modify the argument. Compiler generates an error if this condition is violated. Declaration of this type of argument is significant only when we pass arguments by reference or pointers."},
{"question":"What is the difference between a structure and a class in C++?","answer":"There is only one main difference between a structure and a class in C++ it is that the members of a class are private by default and by default the members of a structure are public."},
{"question":"A class specification has two parts name them?","answer":"<div><ol><li>Class declaration.</li><li>Class function definitions.</li></ol></div>"},
{"question":"How can a member function be defined?","answer":"A member function can be defined in two places:<div><ol><li>Outside the class definition.</li><li>Inside the class definition.</li></ol></div>"},
{"question":"What does <b>getdata()</b> and <b>putdata()</b> mean?","answer":"putdata() is used for output whereas getdata() is used for input."},
{"question":"How memory is allocated to objects?","answer":"Memory is allocated to objects when they are declared not when the class is specified. Memory is allocated only once when they are defined as a part of a class specification."},
{"question":"What are static data members?","answer":"A data member can be declared as static. Static member is initialized to zero when the first object of its class is created. No other initialization is permitted. One copy of that member is created for the entire class and is shared by all objects of that class. It is only visible within the class."},
{"question":"What are static member functions?","answer":"The static member functions are similar to static data variables. The static member functions have the following properties:<div><ol><li>A static member function can only access other static members.</li><li>A static member function can be called using the class name.</li></ol></div>"},
{"question":"What are Arrays of objects?","answer":"Arrays of variables of the type class, such variables are called arrays of objects."},
{"question":"An object can be used as a function member, how can we do this?","answer":"Objects can be used as a function member this is done in the following ways:<div><ol><li>Address of the object is transferred to the function and,</li><li>Copy of the entire object is passed to the function.</li></ol></div>"},
{"question":"What is friendly function?","answer":"The friendly function should be preceded by the keyword friend. The friendly function is declared elsewhere in the program and is used like any other function."},
{"question":"What do you mean by constructors in C++?","answer":"Constructor is a special member function. Constructor creates an object and initializes it. Constructor is special because its name is the same as the class name. It is invoked whenever an object of its class is created."},
{"question":"What do you mean by parameterized constructors?","answer":"Constructors which can take arguments are called parameterized constructors."},
{"question":"How can we initialize values as arguments to the constructor function when an object is declared?","answer":"We can initialize values as arguments to the constructor function when an object is declared in two ways:<div><ol><li>By calling the constructor explicitly.</li><li>By calling the constructor implicitly.</li></ol></div>"},
{"question":"Can we define constructors with default arguments?","answer":"Yes, we can define constructors with default arguments. For example , the constructor complex() can be declared as follows: <div><pre>complex(int real, int i=0);</pre></div> In this default value of the argument i = zero."},
{"question":"What do you mean by copy constructor?","answer":"A copy constructor is used to declare and initialize an object from another object. Copy constructor takes a reference to an object of the same class as itself as an argument."},
{"question":"When are copy constructors called?","answer":"Copy constructors are called in following cases :<div>1. When a function returns an object of that class by value.</div><div>2. When the object of that class is passed by value as an argument to a function.</div><div>3. When you construct an object based on another object of the same class.</div><div>4. When compiler generates a temporary object.</div>"},
{"question":"Can a copy constructor accept an object of the same class as parameter, instead of reference of the object?","answer":"No. It is specified in the definition of the copy constructor itself. It should generate an error if a programmer specifies a copy constructor with a first argument that is an object and not a reference."},
{"question":"Is it possible to have Virtual Constructor? If yes, how? If not, Why not possible?","answer":"There is nothing like Virtual Constructor. The Constructor canât be virtual as the constructor is a code which is responsible for creating an instance of a class and it canât be delegated to any other object by virtual keyword means"},
{"question":"What are Virtual Destructor?","answer":"A destructor can be virtual as it is possible at runtime depending on the type of object caller is calling to, proper destructor will be called."},
{"question":"What is the difference between a copy constructor and an overloaded assignment operator?","answer":"A copy constructor constructs a new object by using the content of the argument object. An overloaded assignment operator assigns the contents of an existing object to another existing object of the same class."},
{"question":"Can a constructor throw an exception?","answer":"The constructor never throws an error."},
{"question":"What is default constructor?","answer":"Constructor with no arguments or all the arguments has default values."},
{"question":"What is conversion constructor?","answer":"In a class, a Constructor with a single argument makes that constructor as conversion constructor as it can be used for type conversion. That means such a constructor allows automatic conversion to the class being constructed."},
{"question":"How can I handle a constructor that fails?","answer":"You can throw an exception. Constructors don't have a return type, so it's not possible to use return codes. The best way to signal constructor failure is therefore to throw an exception."},
{"question":"What is Stack unwinding?","answer":"When an exception occurs, all the local objects created while execution are destroyed in the reverse order, this mechanism is called stack unwinding. During stack unwinding destructors of all these local objects are called, and then the catch block is executed."},
{"question":"What's the order that local objects are destructed?","answer":"In reverse order of construction: First constructed, last destructed."},
{"question":"Can the destructor for a class be overloaded?","answer":"<b>No</b>, There is only one destructor for a class. Destructors never take any parameters and never returns anything. You can not pass any parameter to a destructor as you never call it explicitly."},
{"question":"Can we explicitly call a destructor on a local variable?","answer":"Yes, we can. But we should never do so.<div>The destructor will get called again at the close } of the block in which the local was created. This is a guarantee of the language, it happens automagically, there's no way to stop it from happening. But you can get really bad results from calling a destructor on the same object a second time.</div>"},
{"question":"How can we destroy a local object explicitly before the end?","answer":"By Simply wrapping up the extent of the lifetime of the local object in an artificial block.<code>some block { create object here }</code>"},
{"question":"What is Inheritance?","answer":": Inheritance allows one class to reuse the state and behavior of another class. The derived class inherits the properties and method implementations of the base class and extends it by overriding methods and adding additional properties and methods."},
{"question":"What is Multiple Inheritance(virtual inheritance)? What are its Advantages and Disadvantages?","answer":"Multiple Inheritance is the process whereby a child can be derived from more than one parent class. The advantage of multiple inheritance is that it allows a class to inherit the functionality of more than one base class thus allowing for modeling of complex relationships.<p>The disadvantage of multiple inheritance is that it can lead to a lot of confusion(ambiguity) when two base classes implement a method with the same name.</p>"},
{"question":"What a Derived class inherits or doesn't inherit?","answer":"<div><b>INHERITS:</b></div><div>1. Every data member defined in the parent class</div><div>2. Every ordinary member function of the parent class.</div><br/><div><b>DOESN&apos;T INHERIT</b></div><div>1. The base class's constructors and destructor</div><div>2. The base class's assignment operator.</div><div>3. The base class's friends.</div>"},
{"question":"What does dynamic constructor mean?","answer":"We can use a constructor to allocate memory while creating objects. Allocation of memory to objects at the time of their construction is known as dynamic construction of objects. Memory is allocated with the help of new operator."},
{"question":"What are destructors?","answer":"Destructors as their name suggests is used to destroy the objects that have been created by a constructor. Like  a constructor, destructor is a member function whose name is the same as the class name. Destructor never takes any argument nor does it return any value."},
{"question":"Which Operators cannot be overloaded?","answer":"Following operators cannot be overloaded : <div><ul><li>Class member access operators(.)</li><li>Scope resolution operator (::)</li><li>Size operator (sizeof)</li><li>Conditional operator (?:)</li></ul></div>"},
{"question":"What do you mean by Operator function?","answer":"Operator function is the function by which operator overloading is done, which describes special tasks to an operator."},
{"question":"What do you mean by Inheritance?","answer":"The method through which we can derive a new class from an old class is referred as inheritance. New class is known as derived class and old class is known as base class."},
{"question":"What do you mean by Single inheritance?","answer":"A derived class with only one base class is known as single inheritance."},
{"question":"What do you mean by Multiple inheritance?","answer":"Multiple inheritance means when a class can inherit properties from more than one class is said to be multiple inheritance."},
{"question":"What do you mean by Multilevel inheritance?","answer":"A class derived from another class is known as Multilevel inheritance. <div><b>A &rarr; B &rarr; C</b></div><div>B inheriting from A, and C inheriting from B, makes it Multilevel Inheritance.</div>"},
{"question":"What do you mean by Hierarchical inheritance?","answer":"Hierarchical inheritance is when the properties of one class is inherited by more than one class is known as hierarchical inheritance."},
{"question":"What do you understand by Abstract classes?","answer":"A class which is not used to create objects is known as Abstract class. Abstract class is designed to act as a base class to the inherited classes. "},
{"question":"What do you mean by Virtual base class?","answer":"When one or more objects are derived from the common base class, we can prevent multiple copies of the base class being present in an object derived from those objects by simply declaring the base class as virtual base class when it is being inherited, this is called virtual base class."},
{"question":"What do you mean by Containership or Nesting?","answer":"By Nesting or Containership we mean that a class containing objects of other classes is called Containership or Nesting."},
{"question":"What do you mean by Early binding?","answer":"The overloaded members are selected for invoking by matching arguments both number and type. This information is with the compiler at the time of compile time therefore the compiler is able to select the appropriate function for a particular call this is called <b>Early binding</b>. Early binding is also called as Static binding or Static linking."},
{"question":"What is Runtime Polymorphism?","answer":"Selecting appropriate member function while the program is running is called <b>Runtime polymorphism</b>."},
{"question":"How we declare pointers?","answer":"<code>Datatype *pointer variable;</code><div>This is the format for pointer declaration.</div>"},
{"question":"How can we manipulate a pointer?","answer":"We can manipulate a pointer with *(indirection operator). With this operator we can indirectly access the data variable content. This is also called <b>dereference operator</b>."},
{"question":"Tell something about pointer arithmetic?","answer":"<div><ul><li>Pointers can be incremented or decremented.</li><li>From pointer an integer can be added or subtracted</li><li>One pointer can be subtracted from another.</li></ul></div>"},
{"question":"What is callback function?","answer":"The pointer to function is known as callback function. We use these pointers to refer to a function."},
{"question":"Tell about this pointer?","answer":"This is a unique keyword. It is used to represent an object which invokes a member function. This is a pointer which points to the object for which this function was called."},
{"question":"How do we achieve Polymorphism?","answer":"Polymorphism is achieved by virtual function."},
{"question":"What are placeholders in C++?","answer":"Functions which are seldom used inside the class for performing any task these serve as placeholders. "},
{"question":"What is pure virtual function?","answer":"A virtual function which is equated to zero is called pure virtual function. It is a function declared in a base class that has no definition relative to the base class."},
{"question":"How many types of errors are there?","answer":"There are two most common errors:<div><ul><li>Logic Error</li><li>Syntactic Error</li></ul></div>"},
{"question":"What are Exceptions?","answer":"Exceptions are run time anomalies or unusual conditions that a program may encounter while executing. "},
{"question":"Exceptions are of how many types?","answer":"Exceptions are of two types:<div><ol><li>Asynchronous Exception</li><li>Synchronous Exception</li></ol></div>"},
{"question":"The keyword <b>try</b> is used for?","answer":"<b>try</b> keyword is used to preface a block of statements which may generate exception."},
{"question":"The keyword <b>throw</b> is used for?","answer":"When an exception is detected, it is thrown using a <b>throw</b> statement in try block. "},
{"question":"The keyword <b>catch</b> is used for?","answer":"The <b>catch</b> block defined by the keyword catch catches the exception thrown by the throw statement in the try block and handles it appropriately."},
{"question":"Can we rethrow an exception?","answer":"We can rethrow an exception by invoking a throw function without any arguments."},
{"question":"What components are there in Standard template library?","answer":"There are three components in Standard template library:<div><ul><li>Containers</li><li>Algorithm</li><li>Iterators</li></ul></div>"},
{"question":"What are containers?","answer":"There are three major containers:<div><ul><li>Sequence containers</li><li>Associative containers</li><li>Derived containers</li></ul></div>"},
{"question":"Vector is used for?","answer":"It allows insertions and deletions from the end. It is a dynamic array, in other words arrays that can change size."},
{"question":"What are sequence containers?","answer":"Sequence containers store elements in linear sequence. There are three types of sequence container.<div><ol><li>Vector</li><li>List</li><li>Dequeue</li></ol></div>"},
{"question":"What are derived containers?","answer":"There are three types of derived containers:<div><ol><li>Stack</li><li>Queue</li><li>Priority-queue.</li></ol></div>"},
{"question":"What are algorithms?","answer":"Algorithms are functions that can be generally used across a variety of containers for processing their contents."},
{"question":"What are function objects?","answer":"Function objects are functions that are wrapped in a class so that it looks like an object."},
{"question":"What is a stream in C++?","answer":"The I/O system supplies an interface to the programmer that is independent of the actual device being accessed. This interface is called stream."},
{"question":"What is input stream?","answer":"The source stream that provides data to the program is called input stream."},
{"question":"What is output stream?","answer":"The destination stream that receives the output from the program is known as output stream."},
{"question":"We use ios for?","answer":"ios is a general input output stream class. It contains all the facilities that are used by all other input output classes."},
{"question":"We use istream for?","answer":"It inherits the properties of <b>ios</b>, declares input function as get(), getline() and read()."},
{"question":"We use ostream for?","answer":"It inherits the properties of <b>ios</b>, declares output functions as put() and write()."},
{"question":"Then what is iostream for?","answer":"It inherits the properties of <b>istream</b> and <b>ostream</b> through Multiple Inheritance."},
{"question":"What is streambuf?","answer":"streambuf provides an interface to physical devices through buffers."},
{"question":"Tell about put() and get() functions?","answer":"<div><code>put()</code> ï¿½ ostream class defines put() function. It handles the single character output operations.</div><div><code>get()</code> ï¿½ istream class defines get() function. It handles the single character input operations.</div>"},
{"question":"Tell about getline() and write() functions?","answer":"We can read and display a line of text more efficiently using these functions, getline() function reads the whole line of text that ends with a newline character and the write() function displays an entire line"},
{"question":"What are Manipulators? ","answer":"<b>iomanip</b> header file provides a set of functions called <b>manipulators</b> which can be used to used to manipulate the output formats."},
{"question":"The I/O system of C++ contains a set of classes that defines the file handling name them?","answer":"File handling methods are <b>ifstream</b>, <b>ofstream</b> and <b>fstream</b>, these classes are derived from fstreambase."},
{"question":"What does <b>filebuf</b> means?","answer":"Its purpose is to set the file buffers to read and write."},
{"question":"What are functions <b>seekg()</b>, <b>seekp()</b>, <b>tellg()</b> and <b>tellp()</b> for?","answer":"<div><b>seekg()</b> - Moves get pointer (input) to a specified location.</div><div><b>seekp()</b> - Moves put pointer (output) to a specified location.</div><div><b>tellg()</b> - Gives the current position of the get pointer.</div><div><b>tellp()</b> - Gives the current position of the put pointer.</div>"},
{"question":"What do you mean by <b>generic programming</b>?","answer":"Generic programming is an approach where generic types are used as parameters in algorithms."},
{"question":"How can we accomplish overloading resolution?","answer":"By doing the following we can accomplish overloading resolution:<div>1. Call an ordinary function that has an exact match</div><div>2. Call a template function that could be created with an exact match, and</div><div>3. Try normal overloading resolution to ordinary functions and call the one that matches.</div>"},
{"question":"Difference between <b>cin&gt;&gt;</b> and <b>getline()</b> function?","answer":"Using <b>cin&gt;&gt;</b> operator one can only read one word of a string whereas with <b>getline()</b> function permits us to read a line of text containing embedded blanks."},
{"question":"What is function <code>find_first_of()</code> used for?","answer":"It is used for finding the location of first occurrence of the specified character."},
{"question":"Explain how a Thread Pool works?","answer":"One thread dispatches other threads to do useful work which are usually part of a worker thread pool. This thread pool is usually pre-allocated before the boss (or master) begins dispatching threads to work. Although threads are lightweight, they still incur overhead when they are created. If the boss thread becomes a worker thread once it's done starting other worker threads then this is a Peer Thread Design Pattern."},
{"question":"Define: Critical Section in Multithreading in C++","answer":"Its the code between lock and unlock calls to a mutex."},
{"question":"What are four mutex types?","answer":"Recursive: allows a thread holding the lock to acquire the same lock again which may be necessary for recursive algorithms. Queuing: allows for fairness in lock acquisition by providing FIFO ordering to the arrival of lock requests. Such mutexes may be slower due to increased overhead and the possibility of having to wake threads next in line that may be sleeping. Reader/Writer: allows for multiple readers to acquire the lock simultaneously. If existing readers have the lock, a writer request on the lock will block until all readers have given up the lock. This can lead to writer starvation. Scoped: RAII-style semantics regarding lock acquisition and unlocking."},
{"question":"What is Deadlock?","answer":"Two (or more) threads have stopped execution or are spinning permanently. For example, a simple deadlock situation: thread 1 locks lock A, thread 2 locks lock B, thread 1 wants lock B and thread 2 wants lock A."},
{"question":"How can you prevent deadlocking from occurring?","answer":"You can prevent deadlocks from happening by making sure threads acquire locks in an agreed order (i.e. preservation of lock ordering). Deadlock can also happen if threads do not unlock mutexes properly."},
{"question":"Define : Race Condition","answer":"A race condition is when non-deterministic behavior results from threads accessing shared data or resources without following a defined synchronization protocol for serializing such access."},
{"question":"How can you prevent Race Conditions from occurring?","answer":"Take steps within your program to enforce serial access to shared file descriptors and other external resources."},
{"question":"Define : Priority Inversion","answer":"A higher priority thread can wait behind a lower priority thread if the lower priority thread holds a lock for which the higher priority thread is waiting. In such a case its called priority inversion, as the higher priority thread has no other option, but wait."},
{"question":"Define: Condition Variables","answer":"Condition variables allow threads to synchronize to a value of a shared resource. Typically, condition variables are used as a notification system between threads. In Java wait() and notify() are used."},
{"question":"Define: (Thread) Barriers","answer":"Barriers are a method to synchronize a set of threads at some point in time by having all participating threads in the barrier wait until all threads have called the said barrier function. This, in essence, blocks all threads participating in the barrier until the slowest participating thread reaches the barrier call."},
{"question":"Define: Semaphores","answer":"Semaphores are another type of synchronization primitive that come in two flavors: binary and counting. Binary semaphores act much like simple mutexes, while counting semaphores can behave as recursive mutexes. Counting semaphores can be initialized to any arbitrary value which should depend on how many resources you have available for that particular shared data. Many threads can obtain the lock simultaneously until the limit is reached. This is referred to as lock depth."},
{"question":"Define: Spinlocks","answer":"Spinlocks are locks which spin on mutexes. Spinning refers to continuously polling until a condition has been met. In the case of spinlocks, if a thread cannot obtain the mutex, it will keep polling the lock until it is free. The advantage of a spinlock is that the thread is kept active and does not enter a sleep-wait for a mutex to become available, thus can perform better in certain cases than typical blocking-sleep-wait style mutexes. Mutexes which are heavily contended are poor candidates for spinlocks. "},
{"question":"List six Synchronization primitives used in Multithreading.","answer":"Mutex, Join, Condition Variables, Barriers, Spin Loack and Semaphores."},
{"question":"Define: Livelock","answer":"A livelock is similar to a deadlock, except that the states of the processes involved in the livelock constantly change with regard to one another, none progressing."},
{"question":"What does the term 'lock-free' mean?","answer":"Multithreaded code written such that the threads can never permanently lock up."},
{"question":"Define: 'Busy waiting' and how it can be avoided?","answer":"When one thread is waiting for another thread using an active looping structure that doesn't do anything. This can be avoided using mutexes."}
]}
